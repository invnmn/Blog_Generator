{"ast":null,"code":"var _jsxFileName = \"C:\\\\INVDOC\\\\BLOG-AUTOMATION\\\\DEV-APP\\\\blog-generator\\\\src\\\\BlogGenerator.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // Import styles for the editor\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BlogGenerator() {\n  _s();\n  const navigate = useNavigate(); // Hook for navigation\n  const [userId, setUserId] = useState(\"\");\n  const [topic, setTopic] = useState(\"\");\n  const [section, setSection] = useState(\"TITLE\");\n  const [additionalPrompt, setAdditionalPrompt] = useState(\"\");\n  const [content, setContent] = useState({\n    title: \"\",\n    intro: \"\",\n    body: \"\"\n  });\n  const [editorContent, setEditorContent] = useState(\"\");\n\n  // Fetch existing blog when User ID is entered\n  useEffect(() => {\n    if (userId) {\n      axios.get(`http://localhost:5000/get_blog?user_id=${userId}`).then(response => {\n        if (response.data.blog_title) {\n          setTopic(response.data.blog_title);\n          setContent({\n            title: response.data.title || \"\",\n            intro: response.data.intro || \"\",\n            body: response.data.body || \"\"\n          });\n        }\n      }).catch(error => console.error(\"Error fetching blog:\", error));\n    }\n  }, [userId]);\n\n  // Update editor content when the section changes\n  useEffect(() => {\n    if (section === \"TITLE\") setEditorContent(content.title);else if (section === \"INTRODUCTION\") setEditorContent(content.intro);else if (section === \"BODY\") setEditorContent(content.body);\n  }, [section, content]);\n\n  // Function to generate content\n  const handleGenerate = async () => {\n    if (!userId || !topic) {\n      alert(\"Please enter User ID and Blog Topic\");\n      return;\n    }\n    const response = await axios.post(\"http://localhost:5000/generate\", {\n      user_id: userId,\n      topic,\n      section,\n      additionalPrompt\n    });\n    setContent(prev => ({\n      ...prev,\n      [section.toLowerCase()]: response.data[section.toLowerCase()]\n    }));\n  };\n\n  // Function to save edited content\n  const handleSave = async () => {\n    if (!userId) {\n      alert(\"Please enter a User ID before saving.\");\n      return;\n    }\n    const updatedContent = {\n      ...content,\n      [section.toLowerCase()]: editorContent\n    };\n    setContent(updatedContent);\n    await axios.post(\"http://localhost:5000/generate\", {\n      user_id: userId,\n      topic,\n      section,\n      additionalPrompt\n    });\n    alert(\"Blog saved successfully!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: \"800px\",\n      margin: \"auto\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"AI Blog Generator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userId,\n        onChange: e => setUserId(e.target.value),\n        placeholder: \"Enter User ID\",\n        style: {\n          padding: \"10px\",\n          width: \"200px\",\n          textAlign: \"right\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: topic,\n      onChange: e => setTopic(e.target.value),\n      placeholder: \"Enter blog topic\",\n      style: {\n        width: \"100%\",\n        padding: \"10px\",\n        marginBottom: \"10px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: section,\n      onChange: e => setSection(e.target.value),\n      style: {\n        width: \"100%\",\n        padding: \"10px\",\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"TITLE\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"INTRODUCTION\",\n        children: \"Introduction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"BODY\",\n        children: \"Body\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerate,\n      style: {\n        padding: \"10px\",\n        width: \"100%\"\n      },\n      children: \"Generate Content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Editing: \", section]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n      theme: \"snow\",\n      value: editorContent,\n      onChange: setEditorContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: \"10px\",\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        style: {\n          padding: \"10px\",\n          flex: 1\n        },\n        children: \"Save Blog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate(`/editor?user_id=${userId}`),\n        style: {\n          padding: \"10px\",\n          flex: 1\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(BlogGenerator, \"qs5E/Fu+UirzwDSZAWS2CYr2ig4=\", false, function () {\n  return [useNavigate];\n});\n_c = BlogGenerator;\nexport default BlogGenerator;\n\n// import { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import ReactQuill from \"react-quill\";\n// import \"react-quill/dist/quill.snow.css\"; // Import styles for the editor\n\n// function BlogGenerator() {\n//   const [userId, setUserId] = useState(\"\"); // User ID input\n//   const [topic, setTopic] = useState(\"\");\n//   const [section, setSection] = useState(\"TITLE\");\n//   const [additionalPrompt, setAdditionalPrompt] = useState(\"\");\n//   const [content, setContent] = useState({\n//     title: \"\",\n//     intro: \"\",\n//     body: \"\",\n//   });\n//   const [editorContent, setEditorContent] = useState(\"\"); // Editor content\n\n//   // Fetch existing blog when User ID is entered\n//   useEffect(() => {\n//     if (userId) {\n//       axios.get(`http://localhost:5000/get_blog?user_id=${userId}`)\n//         .then(response => {\n//           if (response.data.blog_title) {\n//             setTopic(response.data.blog_title);\n//             setContent({\n//               title: response.data.title || \"\",\n//               intro: response.data.intro || \"\",\n//               body: response.data.body || \"\",\n//             });\n//           }\n//         })\n//         .catch(error => console.error(\"Error fetching blog:\", error));\n//     }\n//   }, [userId]);\n\n//   // Update editor content when the section changes\n//   useEffect(() => {\n//     if (section === \"TITLE\") setEditorContent(content.title);\n//     else if (section === \"INTRODUCTION\") setEditorContent(content.intro);\n//     else if (section === \"BODY\") setEditorContent(content.body);\n//   }, [section, content]);\n\n//   // Function to generate content\n//   const handleGenerate = async () => {\n//     if (!userId || !topic) {\n//       alert(\"Please enter User ID and Blog Topic\");\n//       return;\n//     }\n\n//     const response = await axios.post(\"http://localhost:5000/generate\", {\n//       user_id: userId,\n//       topic,\n//       section,\n//       additionalPrompt,\n//     });\n\n//     setContent(prev => ({ ...prev, [section.toLowerCase()]: response.data[section.toLowerCase()] }));\n//   };\n\n//   // Function to save edited content\n//   const handleSave = async () => {\n//     if (!userId) {\n//       alert(\"Please enter a User ID before saving.\");\n//       return;\n//     }\n\n//     const updatedContent = { ...content, [section.toLowerCase()]: editorContent };\n//     setContent(updatedContent);\n\n//     await axios.post(\"http://localhost:5000/generate\", {\n//       user_id: userId,\n//       topic,\n//       section,\n//       additionalPrompt,\n//     });\n\n//     alert(\"Blog saved successfully!\");\n//   };\n\n//   return (\n//     <div style={{ maxWidth: \"800px\", margin: \"auto\", padding: \"20px\" }}>\n//       {/* User ID Input at the Top Right */}\n//       <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\n//         <h2>AI Blog Generator</h2>\n//         <input\n//           type=\"text\"\n//           value={userId}\n//           onChange={(e) => setUserId(e.target.value)}\n//           placeholder=\"Enter User ID\"\n//           style={{ padding: \"10px\", width: \"200px\", textAlign: \"right\" }}\n//         />\n//       </div>\n\n//       {/* Blog Topic Input */}\n//       <input\n//         type=\"text\"\n//         value={topic}\n//         onChange={(e) => setTopic(e.target.value)}\n//         placeholder=\"Enter blog topic\"\n//         style={{ width: \"100%\", padding: \"10px\", marginBottom: \"10px\" }}\n//       />\n\n//       {/* Section Selector */}\n//       <select\n//         value={section}\n//         onChange={(e) => setSection(e.target.value)}\n//         style={{ width: \"100%\", padding: \"10px\", marginBottom: \"10px\" }}\n//       >\n//         <option value=\"TITLE\">Title</option>\n//         <option value=\"INTRODUCTION\">Introduction</option>\n//         <option value=\"BODY\">Body</option>\n//       </select>\n\n//       <button onClick={handleGenerate} style={{ padding: \"10px\", width: \"100%\" }}>\n//         Generate Content\n//       </button>\n\n//       {/* Rich Text Editor */}\n//       <h3>Editing: {section}</h3>\n//       <ReactQuill\n//         theme=\"snow\"\n//         value={editorContent}\n//         onChange={setEditorContent}\n//       />\n\n//       <button onClick={handleSave} style={{ padding: \"10px\", width: \"100%\", marginTop: \"20px\" }}>\n//         Save Blog\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default BlogGenerator;\n\n// import { useState } from 'react';\n\n// function BlogGenerator() {\n//   const [topic, setTopic] = useState('');\n//   const [section, setSection] = useState('ALL');\n//   const [additionalPrompt, setAdditionalPrompt] = useState('');\n//   const [content, setContent] = useState({ title: '', intro: '', body: '' });\n\n//   const handleGenerate = async () => {\n//     const response = await fetch('http://localhost:5000/generate', {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify({ topic, section, additionalPrompt }),\n//     });\n//     const data = await response.json();\n//     setContent(data);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Blog Generator</h2>\n//       <input value={topic} onChange={(e) => setTopic(e.target.value)} placeholder=\"Enter blog topic\" />\n//       <select value={section} onChange={(e) => setSection(e.target.value)}>\n//         <option value=\"ALL\">All</option>\n//         <option value=\"TITLE\">Title</option>\n//         <option value=\"INTRODUCTION\">Introduction</option>\n//         <option value=\"BODY\">Body</option>\n//       </select>\n//       <textarea value={additionalPrompt} onChange={(e) => setAdditionalPrompt(e.target.value)} placeholder=\"Additional prompt\" />\n//       <button onClick={handleGenerate}>Generate</button>\n//       <h3>Generated Content</h3>\n//       <p><strong>Title:</strong> {content.title}</p>\n//       <p><strong>Introduction:</strong> {content.introduction}</p>\n//       <p><strong>Body:</strong> {content.body}</p>\n//     </div>\n//   );\n// }\n\n// export default BlogGenerator;\nvar _c;\n$RefreshReg$(_c, \"BlogGenerator\");","map":{"version":3,"names":["useState","useEffect","useNavigate","axios","ReactQuill","jsxDEV","_jsxDEV","BlogGenerator","_s","navigate","userId","setUserId","topic","setTopic","section","setSection","additionalPrompt","setAdditionalPrompt","content","setContent","title","intro","body","editorContent","setEditorContent","get","then","response","data","blog_title","catch","error","console","handleGenerate","alert","post","user_id","prev","toLowerCase","handleSave","updatedContent","style","maxWidth","margin","padding","children","display","justifyContent","alignItems","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","width","textAlign","marginBottom","onClick","theme","gap","marginTop","flex","_c","$RefreshReg$"],"sources":["C:/INVDOC/BLOG-AUTOMATION/DEV-APP/blog-generator/src/BlogGenerator.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\"; // Import styles for the editor\r\n\r\nfunction BlogGenerator() {\r\n  const navigate = useNavigate(); // Hook for navigation\r\n  const [userId, setUserId] = useState(\"\");\r\n  const [topic, setTopic] = useState(\"\");\r\n  const [section, setSection] = useState(\"TITLE\");\r\n  const [additionalPrompt, setAdditionalPrompt] = useState(\"\");\r\n  const [content, setContent] = useState({ title: \"\", intro: \"\", body: \"\" });\r\n  const [editorContent, setEditorContent] = useState(\"\");\r\n\r\n  // Fetch existing blog when User ID is entered\r\n  useEffect(() => {\r\n    if (userId) {\r\n      axios.get(`http://localhost:5000/get_blog?user_id=${userId}`)\r\n        .then(response => {\r\n          if (response.data.blog_title) {\r\n            setTopic(response.data.blog_title);\r\n            setContent({\r\n              title: response.data.title || \"\",\r\n              intro: response.data.intro || \"\",\r\n              body: response.data.body || \"\",\r\n            });\r\n          }\r\n        })\r\n        .catch(error => console.error(\"Error fetching blog:\", error));\r\n    }\r\n  }, [userId]);\r\n\r\n  // Update editor content when the section changes\r\n  useEffect(() => {\r\n    if (section === \"TITLE\") setEditorContent(content.title);\r\n    else if (section === \"INTRODUCTION\") setEditorContent(content.intro);\r\n    else if (section === \"BODY\") setEditorContent(content.body);\r\n  }, [section, content]);\r\n\r\n  // Function to generate content\r\n  const handleGenerate = async () => {\r\n    if (!userId || !topic) {\r\n      alert(\"Please enter User ID and Blog Topic\");\r\n      return;\r\n    }\r\n\r\n    const response = await axios.post(\"http://localhost:5000/generate\", {\r\n      user_id: userId,\r\n      topic,\r\n      section,\r\n      additionalPrompt,\r\n    });\r\n\r\n    setContent(prev => ({ ...prev, [section.toLowerCase()]: response.data[section.toLowerCase()] }));\r\n  };\r\n\r\n  // Function to save edited content\r\n  const handleSave = async () => {\r\n    if (!userId) {\r\n      alert(\"Please enter a User ID before saving.\");\r\n      return;\r\n    }\r\n\r\n    const updatedContent = { ...content, [section.toLowerCase()]: editorContent };\r\n    setContent(updatedContent);\r\n\r\n    await axios.post(\"http://localhost:5000/generate\", {\r\n      user_id: userId,\r\n      topic,\r\n      section,\r\n      additionalPrompt,\r\n    });\r\n\r\n    alert(\"Blog saved successfully!\");\r\n  };\r\n\r\n  return (\r\n    <div style={{ maxWidth: \"800px\", margin: \"auto\", padding: \"20px\" }}>\r\n      <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n        <h2>AI Blog Generator</h2>\r\n        <input\r\n          type=\"text\"\r\n          value={userId}\r\n          onChange={(e) => setUserId(e.target.value)}\r\n          placeholder=\"Enter User ID\"\r\n          style={{ padding: \"10px\", width: \"200px\", textAlign: \"right\" }}\r\n        />\r\n      </div>\r\n\r\n      <input\r\n        type=\"text\"\r\n        value={topic}\r\n        onChange={(e) => setTopic(e.target.value)}\r\n        placeholder=\"Enter blog topic\"\r\n        style={{ width: \"100%\", padding: \"10px\", marginBottom: \"10px\" }}\r\n      />\r\n\r\n      <select\r\n        value={section}\r\n        onChange={(e) => setSection(e.target.value)}\r\n        style={{ width: \"100%\", padding: \"10px\", marginBottom: \"10px\" }}\r\n      >\r\n        <option value=\"TITLE\">Title</option>\r\n        <option value=\"INTRODUCTION\">Introduction</option>\r\n        <option value=\"BODY\">Body</option>\r\n      </select>\r\n\r\n      <button onClick={handleGenerate} style={{ padding: \"10px\", width: \"100%\" }}>\r\n        Generate Content\r\n      </button>\r\n\r\n      <h3>Editing: {section}</h3>\r\n      <ReactQuill theme=\"snow\" value={editorContent} onChange={setEditorContent} />\r\n\r\n      <div style={{ display: \"flex\", gap: \"10px\", marginTop: \"20px\" }}>\r\n        <button onClick={handleSave} style={{ padding: \"10px\", flex: 1 }}>\r\n          Save Blog\r\n        </button>\r\n        <button onClick={() => navigate(`/editor?user_id=${userId}`)} style={{ padding: \"10px\", flex: 1 }}>\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlogGenerator;\r\n\r\n\r\n\r\n\r\n// import { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import ReactQuill from \"react-quill\";\r\n// import \"react-quill/dist/quill.snow.css\"; // Import styles for the editor\r\n\r\n// function BlogGenerator() {\r\n//   const [userId, setUserId] = useState(\"\"); // User ID input\r\n//   const [topic, setTopic] = useState(\"\");\r\n//   const [section, setSection] = useState(\"TITLE\");\r\n//   const [additionalPrompt, setAdditionalPrompt] = useState(\"\");\r\n//   const [content, setContent] = useState({\r\n//     title: \"\",\r\n//     intro: \"\",\r\n//     body: \"\",\r\n//   });\r\n//   const [editorContent, setEditorContent] = useState(\"\"); // Editor content\r\n\r\n//   // Fetch existing blog when User ID is entered\r\n//   useEffect(() => {\r\n//     if (userId) {\r\n//       axios.get(`http://localhost:5000/get_blog?user_id=${userId}`)\r\n//         .then(response => {\r\n//           if (response.data.blog_title) {\r\n//             setTopic(response.data.blog_title);\r\n//             setContent({\r\n//               title: response.data.title || \"\",\r\n//               intro: response.data.intro || \"\",\r\n//               body: response.data.body || \"\",\r\n//             });\r\n//           }\r\n//         })\r\n//         .catch(error => console.error(\"Error fetching blog:\", error));\r\n//     }\r\n//   }, [userId]);\r\n\r\n//   // Update editor content when the section changes\r\n//   useEffect(() => {\r\n//     if (section === \"TITLE\") setEditorContent(content.title);\r\n//     else if (section === \"INTRODUCTION\") setEditorContent(content.intro);\r\n//     else if (section === \"BODY\") setEditorContent(content.body);\r\n//   }, [section, content]);\r\n\r\n//   // Function to generate content\r\n//   const handleGenerate = async () => {\r\n//     if (!userId || !topic) {\r\n//       alert(\"Please enter User ID and Blog Topic\");\r\n//       return;\r\n//     }\r\n\r\n//     const response = await axios.post(\"http://localhost:5000/generate\", {\r\n//       user_id: userId,\r\n//       topic,\r\n//       section,\r\n//       additionalPrompt,\r\n//     });\r\n\r\n//     setContent(prev => ({ ...prev, [section.toLowerCase()]: response.data[section.toLowerCase()] }));\r\n//   };\r\n\r\n//   // Function to save edited content\r\n//   const handleSave = async () => {\r\n//     if (!userId) {\r\n//       alert(\"Please enter a User ID before saving.\");\r\n//       return;\r\n//     }\r\n\r\n//     const updatedContent = { ...content, [section.toLowerCase()]: editorContent };\r\n//     setContent(updatedContent);\r\n\r\n//     await axios.post(\"http://localhost:5000/generate\", {\r\n//       user_id: userId,\r\n//       topic,\r\n//       section,\r\n//       additionalPrompt,\r\n//     });\r\n\r\n//     alert(\"Blog saved successfully!\");\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ maxWidth: \"800px\", margin: \"auto\", padding: \"20px\" }}>\r\n//       {/* User ID Input at the Top Right */}\r\n//       <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n//         <h2>AI Blog Generator</h2>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={userId}\r\n//           onChange={(e) => setUserId(e.target.value)}\r\n//           placeholder=\"Enter User ID\"\r\n//           style={{ padding: \"10px\", width: \"200px\", textAlign: \"right\" }}\r\n//         />\r\n//       </div>\r\n\r\n//       {/* Blog Topic Input */}\r\n//       <input\r\n//         type=\"text\"\r\n//         value={topic}\r\n//         onChange={(e) => setTopic(e.target.value)}\r\n//         placeholder=\"Enter blog topic\"\r\n//         style={{ width: \"100%\", padding: \"10px\", marginBottom: \"10px\" }}\r\n//       />\r\n\r\n//       {/* Section Selector */}\r\n//       <select\r\n//         value={section}\r\n//         onChange={(e) => setSection(e.target.value)}\r\n//         style={{ width: \"100%\", padding: \"10px\", marginBottom: \"10px\" }}\r\n//       >\r\n//         <option value=\"TITLE\">Title</option>\r\n//         <option value=\"INTRODUCTION\">Introduction</option>\r\n//         <option value=\"BODY\">Body</option>\r\n//       </select>\r\n\r\n//       <button onClick={handleGenerate} style={{ padding: \"10px\", width: \"100%\" }}>\r\n//         Generate Content\r\n//       </button>\r\n\r\n//       {/* Rich Text Editor */}\r\n//       <h3>Editing: {section}</h3>\r\n//       <ReactQuill\r\n//         theme=\"snow\"\r\n//         value={editorContent}\r\n//         onChange={setEditorContent}\r\n//       />\r\n\r\n//       <button onClick={handleSave} style={{ padding: \"10px\", width: \"100%\", marginTop: \"20px\" }}>\r\n//         Save Blog\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default BlogGenerator;\r\n\r\n\r\n\r\n// import { useState } from 'react';\r\n\r\n// function BlogGenerator() {\r\n//   const [topic, setTopic] = useState('');\r\n//   const [section, setSection] = useState('ALL');\r\n//   const [additionalPrompt, setAdditionalPrompt] = useState('');\r\n//   const [content, setContent] = useState({ title: '', intro: '', body: '' });\r\n\r\n//   const handleGenerate = async () => {\r\n//     const response = await fetch('http://localhost:5000/generate', {\r\n//       method: 'POST',\r\n//       headers: { 'Content-Type': 'application/json' },\r\n//       body: JSON.stringify({ topic, section, additionalPrompt }),\r\n//     });\r\n//     const data = await response.json();\r\n//     setContent(data);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Blog Generator</h2>\r\n//       <input value={topic} onChange={(e) => setTopic(e.target.value)} placeholder=\"Enter blog topic\" />\r\n//       <select value={section} onChange={(e) => setSection(e.target.value)}>\r\n//         <option value=\"ALL\">All</option>\r\n//         <option value=\"TITLE\">Title</option>\r\n//         <option value=\"INTRODUCTION\">Introduction</option>\r\n//         <option value=\"BODY\">Body</option>\r\n//       </select>\r\n//       <textarea value={additionalPrompt} onChange={(e) => setAdditionalPrompt(e.target.value)} placeholder=\"Additional prompt\" />\r\n//       <button onClick={handleGenerate}>Generate</button>\r\n//       <h3>Generated Content</h3>\r\n//       <p><strong>Title:</strong> {content.title}</p>\r\n//       <p><strong>Introduction:</strong> {content.introduction}</p>\r\n//       <p><strong>Body:</strong> {content.body}</p>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default BlogGenerator;\r\n"],"mappings":"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AAC+B,KAAK,EAAE;UAAEG,OAAO,EAAE,MAAM;UAAEsB,IAAI,EAAE;QAAE,CAAE;QAAArB,QAAA,EAAC;MAEnG;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC5C,EAAA,CAvHQD,aAAa;EAAA,QACHL,WAAW;AAAA;AAAAiE,EAAA,GADrB5D,aAAa;AAyHtB,eAAeA,aAAa;;AAK5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}