{"ast":null,"code":"var _jsxFileName = \"C:\\\\INVDOC\\\\BLOG-AUTOMATION\\\\DEV-APP\\\\blog-generator\\\\src\\\\BlogGenerator.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import ReactQuill from \"react-quill\";\n// import \"react-quill/dist/quill.snow.css\"; // Import styles for the editor\n\n// function BlogGenerator() {\n//   const [topic, setTopic] = useState(\"\");\n//   const [section, setSection] = useState(\"TITLE\");\n//   const [additionalPrompt, setAdditionalPrompt] = useState(\"\");\n//   const [content, setContent] = useState({\n//     title: \"\",\n//     intro: \"\",\n//     body: \"\",\n//   });\n//   const [editorContent, setEditorContent] = useState(\"\"); // Editor content\n\n//   // Update editor content when the section changes\n//   useEffect(() => {\n//     if (section === \"TITLE\") setEditorContent(content.title);\n//     else if (section === \"INTRODUCTION\") setEditorContent(content.introduction);\n//     else if (section === \"BODY\") setEditorContent(content.body);\n//   }, [section, content]);\n\n//   // Function to handle content generation\n//   const handleGenerate = async () => {\n//     const response = await axios.post(\"http://localhost:5000/generate\", {\n//       topic,\n//       section,\n//       additionalPrompt,\n//     });\n\n//     // Update only the generated section\n//     setContent((prevContent) => ({\n//       ...prevContent,\n//       [section.toLowerCase()]: response.data[section.toLowerCase()] || \"\",\n//     }));\n//   };\n\n//   // Function to save edited content\n//   const handleSave = async () => {\n//     const updatedContent = { ...content, [section.toLowerCase()]: editorContent };\n//     setContent(updatedContent); // Update UI state\n\n//     await axios.post(\"http://localhost:5000/save\", {\n//       topic,\n//       content: updatedContent,\n//     });\n\n//     alert(\"Blog saved successfully!\");\n//   };\n\n//   return (\n//     <div style={{ maxWidth: \"800px\", margin: \"auto\", padding: \"20px\" }}>\n//       <h2>AI Blog Generator</h2>\n\n//       {/* Blog Topic Input */}\n//       <input\n//         type=\"text\"\n//         value={topic}\n//         onChange={(e) => setTopic(e.target.value)}\n//         placeholder=\"Enter blog topic\"\n//         style={{ width: \"100%\", padding: \"10px\", marginBottom: \"10px\" }}\n//       />\n\n//       {/* Section Selector */}\n//       <select\n//         value={section}\n//         onChange={(e) => setSection(e.target.value)}\n//         style={{ width: \"100%\", padding: \"10px\", marginBottom: \"10px\" }}\n//       >\n//         <option value=\"TITLE\">Title</option>\n//         <option value=\"INTRODUCTION\">Introduction</option>\n//         <option value=\"BODY\">Body</option>\n//       </select>\n\n//       {/* Additional Prompt Input */}\n//       <textarea\n//         value={additionalPrompt}\n//         onChange={(e) => setAdditionalPrompt(e.target.value)}\n//         placeholder=\"Add additional prompt (optional)\"\n//         style={{ width: \"100%\", padding: \"10px\", marginBottom: \"10px\", height: \"50px\" }}\n//       />\n\n//       <button onClick={handleGenerate} style={{ padding: \"10px\", width: \"100%\" }}>\n//         Generate Content\n//       </button>\n\n//       {/* Single Rich Text Editor */}\n//       <h3>Editing: {section}</h3>\n//       <ReactQuill\n//         theme=\"snow\"\n//         value={editorContent}\n//         onChange={setEditorContent} // Updates editor content only\n//       />\n\n//       <button onClick={handleSave} style={{ padding: \"10px\", width: \"100%\", marginTop: \"20px\" }}>\n//         Save Blog\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default BlogGenerator;\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BlogGenerator() {\n  _s();\n  const [topic, setTopic] = useState('');\n  const [section, setSection] = useState('ALL');\n  const [additionalPrompt, setAdditionalPrompt] = useState('');\n  const [content, setContent] = useState({\n    title: '',\n    intro: '',\n    body: ''\n  });\n  const handleGenerate = async () => {\n    const response = await fetch('http://localhost:5000/generate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        topic,\n        section,\n        additionalPrompt\n      })\n    });\n    const data = await response.json();\n    setContent(data);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Blog Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: topic,\n      onChange: e => setTopic(e.target.value),\n      placeholder: \"Enter blog topic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: section,\n      onChange: e => setSection(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"ALL\",\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"TITLE\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"INTRODUCTION\",\n        children: \"Introduction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"BODY\",\n        children: \"Body\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: additionalPrompt,\n      onChange: e => setAdditionalPrompt(e.target.value),\n      placeholder: \"Additional prompt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerate,\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Generated Content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 10\n      }, this), \" \", content.title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Introduction:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 10\n      }, this), \" \", content.introduction]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Body:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 10\n      }, this), \" \", content.body]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(BlogGenerator, \"Zno6bWrUEctsfAEYoztZjBMe+Dc=\");\n_c = BlogGenerator;\nexport default BlogGenerator;\nvar _c;\n$RefreshReg$(_c, \"BlogGenerator\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","BlogGenerator","_s","topic","setTopic","section","setSection","additionalPrompt","setAdditionalPrompt","content","setContent","title","intro","body","handleGenerate","response","fetch","method","headers","JSON","stringify","data","json","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","introduction","_c","$RefreshReg$"],"sources":["C:/INVDOC/BLOG-AUTOMATION/DEV-APP/blog-generator/src/BlogGenerator.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import ReactQuill from \"react-quill\";\r\n// import \"react-quill/dist/quill.snow.css\"; // Import styles for the editor\r\n\r\n// function BlogGenerator() {\r\n//   const [topic, setTopic] = useState(\"\");\r\n//   const [section, setSection] = useState(\"TITLE\");\r\n//   const [additionalPrompt, setAdditionalPrompt] = useState(\"\");\r\n//   const [content, setContent] = useState({\r\n//     title: \"\",\r\n//     intro: \"\",\r\n//     body: \"\",\r\n//   });\r\n//   const [editorContent, setEditorContent] = useState(\"\"); // Editor content\r\n\r\n//   // Update editor content when the section changes\r\n//   useEffect(() => {\r\n//     if (section === \"TITLE\") setEditorContent(content.title);\r\n//     else if (section === \"INTRODUCTION\") setEditorContent(content.introduction);\r\n//     else if (section === \"BODY\") setEditorContent(content.body);\r\n//   }, [section, content]);\r\n\r\n//   // Function to handle content generation\r\n//   const handleGenerate = async () => {\r\n//     const response = await axios.post(\"http://localhost:5000/generate\", {\r\n//       topic,\r\n//       section,\r\n//       additionalPrompt,\r\n//     });\r\n\r\n//     // Update only the generated section\r\n//     setContent((prevContent) => ({\r\n//       ...prevContent,\r\n//       [section.toLowerCase()]: response.data[section.toLowerCase()] || \"\",\r\n//     }));\r\n//   };\r\n\r\n//   // Function to save edited content\r\n//   const handleSave = async () => {\r\n//     const updatedContent = { ...content, [section.toLowerCase()]: editorContent };\r\n//     setContent(updatedContent); // Update UI state\r\n\r\n//     await axios.post(\"http://localhost:5000/save\", {\r\n//       topic,\r\n//       content: updatedContent,\r\n//     });\r\n\r\n//     alert(\"Blog saved successfully!\");\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ maxWidth: \"800px\", margin: \"auto\", padding: \"20px\" }}>\r\n//       <h2>AI Blog Generator</h2>\r\n\r\n//       {/* Blog Topic Input */}\r\n//       <input\r\n//         type=\"text\"\r\n//         value={topic}\r\n//         onChange={(e) => setTopic(e.target.value)}\r\n//         placeholder=\"Enter blog topic\"\r\n//         style={{ width: \"100%\", padding: \"10px\", marginBottom: \"10px\" }}\r\n//       />\r\n\r\n//       {/* Section Selector */}\r\n//       <select\r\n//         value={section}\r\n//         onChange={(e) => setSection(e.target.value)}\r\n//         style={{ width: \"100%\", padding: \"10px\", marginBottom: \"10px\" }}\r\n//       >\r\n//         <option value=\"TITLE\">Title</option>\r\n//         <option value=\"INTRODUCTION\">Introduction</option>\r\n//         <option value=\"BODY\">Body</option>\r\n//       </select>\r\n\r\n//       {/* Additional Prompt Input */}\r\n//       <textarea\r\n//         value={additionalPrompt}\r\n//         onChange={(e) => setAdditionalPrompt(e.target.value)}\r\n//         placeholder=\"Add additional prompt (optional)\"\r\n//         style={{ width: \"100%\", padding: \"10px\", marginBottom: \"10px\", height: \"50px\" }}\r\n//       />\r\n\r\n//       <button onClick={handleGenerate} style={{ padding: \"10px\", width: \"100%\" }}>\r\n//         Generate Content\r\n//       </button>\r\n\r\n//       {/* Single Rich Text Editor */}\r\n//       <h3>Editing: {section}</h3>\r\n//       <ReactQuill\r\n//         theme=\"snow\"\r\n//         value={editorContent}\r\n//         onChange={setEditorContent} // Updates editor content only\r\n//       />\r\n\r\n//       <button onClick={handleSave} style={{ padding: \"10px\", width: \"100%\", marginTop: \"20px\" }}>\r\n//         Save Blog\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default BlogGenerator;\r\n\r\n\r\n\r\nimport { useState } from 'react';\r\n\r\nfunction BlogGenerator() {\r\n  const [topic, setTopic] = useState('');\r\n  const [section, setSection] = useState('ALL');\r\n  const [additionalPrompt, setAdditionalPrompt] = useState('');\r\n  const [content, setContent] = useState({ title: '', intro: '', body: '' });\r\n\r\n  const handleGenerate = async () => {\r\n    const response = await fetch('http://localhost:5000/generate', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ topic, section, additionalPrompt }),\r\n    });\r\n    const data = await response.json();\r\n    setContent(data);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Blog Generator</h2>\r\n      <input value={topic} onChange={(e) => setTopic(e.target.value)} placeholder=\"Enter blog topic\" />\r\n      <select value={section} onChange={(e) => setSection(e.target.value)}>\r\n        <option value=\"ALL\">All</option>\r\n        <option value=\"TITLE\">Title</option>\r\n        <option value=\"INTRODUCTION\">Introduction</option>\r\n        <option value=\"BODY\">Body</option>\r\n      </select>\r\n      <textarea value={additionalPrompt} onChange={(e) => setAdditionalPrompt(e.target.value)} placeholder=\"Additional prompt\" />\r\n      <button onClick={handleGenerate}>Generate</button>\r\n      <h3>Generated Content</h3>\r\n      <p><strong>Title:</strong> {content.title}</p>\r\n      <p><strong>Introduction:</strong> {content.introduction}</p>\r\n      <p><strong>Body:</strong> {content.body}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlogGenerator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}